AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An Amazon API Gateway WebSocket API and SQS with a AWS Lambda function.

Globals:
  Function:
    Runtime: nodejs14.x
    MemorySize: 128
    Timeout: 15

Resources:
  ConnectionsTable8000B8A1:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  ConnectHandlerServiceRole7E4A9B1F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ConnectHandlerServiceRoleDefaultPolicy7DE94863:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ConnectionsTable8000B8A1
                  - Arn
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      PolicyName: ConnectHandlerServiceRoleDefaultPolicy7DE94863
      Roles:
        - Ref: ConnectHandlerServiceRole7E4A9B1F
  ConnectHandler2FFD52D8:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();
          exports.handler = async function (event, context) {
            try {
              await ddb
                .put({
                  TableName: process.env.table,
                  Item: {
                    connectionId: event.requestContext.connectionId,
                    connectionType: '',
                    connectionStatus: '',
                    id: '',
                    urlPath: '',
                  },
                })
                .promise();
            } catch (err) {
              return {
                statusCode: 500,
              };
            }
            return {
              statusCode: 200,
            };
          };
      Role:
        Fn::GetAtt:
          - ConnectHandlerServiceRole7E4A9B1F
          - Arn
      Environment:
        Variables:
          table:
            Ref: ConnectionsTable8000B8A1
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - ConnectHandlerServiceRoleDefaultPolicy7DE94863
      - ConnectHandlerServiceRole7E4A9B1F
  DisconnectHandlerServiceRoleE54F14F9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  DisconnectHandlerServiceRoleDefaultPolicy1800B9E5:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ConnectionsTable8000B8A1
                  - Arn
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      PolicyName: DisconnectHandlerServiceRoleDefaultPolicy1800B9E5
      Roles:
        - Ref: DisconnectHandlerServiceRoleE54F14F9
  DisconnectHandlerCB7ED6F7:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
                const ddb = new AWS.DynamoDB.DocumentClient();
                
                exports.handler = async function (event, context) {
                  await ddb
                    .delete({
                      TableName: process.env.table,
                      Key: {
                        connectionId: event.requestContext.connectionId,
                      },
                    })
                    .promise();
                  return {
                    statusCode: 200,
                  };
                };
      Role:
        Fn::GetAtt:
          - DisconnectHandlerServiceRoleE54F14F9
          - Arn
      Environment:
        Variables:
          table:
            Ref: ConnectionsTable8000B8A1
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - DisconnectHandlerServiceRoleDefaultPolicy1800B9E5
      - DisconnectHandlerServiceRoleE54F14F9
  ClientConnectHandlerServiceRole8G7E3F1A:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
          Version: '2012-10-17'
        ManagedPolicyArns:
          - Fn::Join:
              - ''
              - - 'arn:'
                - Ref: AWS::Partition
                - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ClientConnectHandlerServiceRoleDefaultPolicyK9Z0W5X6:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ConnectionsTable8000B8A1
                  - Arn
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      PolicyName: ClientConnectHandlerServiceRoleDefaultPolicyK9Z0W5X6
      Roles:
        - Ref: ClientConnectHandlerServiceRole8G7E3F1A
  ClientConnectHandler3Y2R1V9H:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();

          exports.handler = async function (event, context) {
          const body = JSON.parse(event.body);
          const data = body.data;

          const type = data.type;
          const id = data.id;
          const params = {
            TableName: process.env.table,
            Key: {
              connectionId: event.requestContext.connectionId,
            },
            UpdateExpression:
              'SET #cTPlaceholder = :typeValue, #idPlaceholder = :idValue, #statusPlaceholder = :connectionValue, #roomIdPlaceholder = :roomIdValue',
            ExpressionAttributeNames: {
              '#cTPlaceholder': 'connectionType',
              '#idPlaceholder': 'id',
              '#statusPlaceholder': 'connectionStatus',
              '#roomIdPlaceholder': 'roomId',
            },
          };
          if (type === 'sfu') {
            console.log('SFU Connected, Storing Socket with id:', id);
            params.ExpressionAttributeValues = {
              ':typeValue': 'sfu',
              ':idValue': id,
              ':connectionValue': 'UNCLAIMED',
              ':roomIdValue': ''
            };
            try {
              await ddb.update(params).promise();
            } catch (e) {
              console.error('Problem storing SFU', e);
              return {
                statusCode: 500,
              };
            }
            console.log('Stored SFU', data);
          } else if (type === 'client') {
            const roomId = data.roomId
            console.log('Client Connected');
            params.ExpressionAttributeValues = {
              ':typeValue': 'client',
              ':idValue': id,
              ':connectionValue': '',
              ':roomIdValue': roomId,
            };
            try {
              await ddb.update(params).promise();
            } catch (e) {
              console.error('Problem storing Client', e);
              return {
                statusCode: 500,
              };
            }
            console.log('Stored Client', data);
          } else {
            console.log('Missing valid type property');
            return {
              statusCode: 400,
            };
          }

          return { statusCode: 200 };
          };
      Role:
        Fn::GetAtt:
          - ClientConnectHandlerServiceRole8G7E3F1A
          - Arn
      Environment:
        Variables:
          table:
            Ref: ConnectionsTable8000B8A1
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - ClientConnectHandlerServiceRoleDefaultPolicyK9Z0W5X6
      - ClientConnectHandlerServiceRole8G7E3F1A
  DefaultHandlerServiceRoleDF00569C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  DefaultHandlerServiceRoleDefaultPolicy2F57C32F:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:execute-api:'
                  - Ref: AWS::Region
                  - ':'
                  - Ref: AWS::AccountId
                  - ':'
                  - '*/*/POST/@connections/*'
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:execute-api:'
                  - Ref: AWS::Region
                  - ':'
                  - Ref: AWS::AccountId
                  - ':'
                  - '*/*/GET/@connections/*'
        Version: '2012-10-17'
      PolicyName: DefaultHandlerServiceRoleDefaultPolicy2F57C32F
      Roles:
        - Ref: DefaultHandlerServiceRoleDF00569C
  DefaultHandler604DF7AC:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');

                exports.handler = async function (event, context) {
                  let connectionInfo;
                  let connectionId = event.requestContext.connectionId;
                
                  const callbackAPI = new AWS.ApiGatewayManagementApi({
                    apiVersion: '2018-11-29',
                    endpoint:
                      event.requestContext.domainName + '/' + event.requestContext.stage,
                  });
                
                  try {
                    connectionInfo = await callbackAPI
                      .getConnection({ ConnectionId: event.requestContext.connectionId })
                      .promise();
                  } catch (e) {
                    console.log(e);
                  }
                
                  connectionInfo.connectionID = connectionId;
                
                  await callbackAPI
                    .postToConnection({
                      ConnectionId: event.requestContext.connectionId,
                      Data:
                        'Use the sendmessage route to send a message. Your info:' +
                        JSON.stringify(connectionInfo),
                    })
                    .promise();
                
                  return {
                    statusCode: 200,
                  };
                };
      Role:
        Fn::GetAtt:
          - DefaultHandlerServiceRoleDF00569C
          - Arn
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - DefaultHandlerServiceRoleDefaultPolicy2F57C32F
      - DefaultHandlerServiceRoleDF00569C
  WRTCConnectionApiGateway2308:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Description: Send websocket data to SQS which is then processed by a Lambda
      Name: WRTCConnectionApiGateway2308
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  WRTCConnectionApiGatewayProdStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: WRTCConnectionApiGateway2308
      StageName: production
      AutoDeploy: true
  HandshakeHandlerServiceRole2308:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  HandshakeHandlerServiceRoleDefaultPolicy2308:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ConnectionsTable8000B8A1
                  - Arn
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      PolicyName: HandshakeHandlerServiceRoleDefaultPolicy2308
      Roles:
        - Ref: HandshakeHandlerServiceRole2308
  HandshakeHandler2308:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
          const ddb = new AWS.DynamoDB.DocumentClient();

          exports.handler = async (event) => {
            let connections;
            try {
              connections = await ddb.scan({ TableName: process.env.table }).promise();
            } catch (err) {
              return {
                statusCode: 500,
              };
            }

            const callbackAPI = new AWS.ApiGatewayManagementApi({
              apiVersion: '2018-11-29',
              endpoint: process.env.ApiGatewayEndpoint,
            });

            const payload = JSON.parse(event.body);
            const data = payload.data;
            console.log('Processing payload:', payload);

            const socketInfo = connections.Items.find(
              (connection) => connection.id === payload.data.sender
            );

            if (socketInfo.connectionType === 'sfu') {
              const { sender, receiver } = data;
              const clientSocketInfo = connections.Items.find(
                (connection) => connection.id === receiver
              );
              try {
                console.log('SFU >>> Client');
                await callbackAPI
                  .postToConnection({
                    ConnectionId: clientSocketInfo.connectionId,
                    Data: JSON.stringify(data),
                  })
                  .promise();
              } catch (e) {
                console.log(e);
                return { statusCode: 500 };
              }
            } else {
              const client = connections.Items.find(
                (conn) => conn.connectionId === event.requestContext.connectionId,
              );
              
              const sfuInfo = connections.Items.find(
                (conn) => conn.id === client.roomId
              );
              console.log(
                `Client: ${socketInfo.connectionId} Handshaking with SFU ${sfuInfo.connectionId}`
              );

              try {
                console.log('Client >>> SFU');
                await callbackAPI
                  .postToConnection({
                    ConnectionId: sfuInfo.connectionId,
                    Data: JSON.stringify(data),
                  })
                  .promise();
              } catch (e) {
                console.log(e);
                return { statusCode: 500 };
              }
            }

            const response = {
              statusCode: 200,
              body: JSON.stringify('payload processed'),
            };
            return response;
          };
      Role:
        Fn::GetAtt:
          - HandshakeHandlerServiceRole2308
          - Arn
      Runtime: nodejs14.x
      Environment:
        Variables:
          table:
             Ref: ConnectionsTable8000B8A1
          ApiGatewayEndpoint:
            Fn::Join:
              - ""
              - - Ref: WRTCConnectionApiGateway2308
                - .execute-api.
                - Ref: AWS::Region
                - "."
                - Ref: AWS::URLSuffix
                - /production
      Handler: index.handler
    DependsOn:
      - HandshakeHandlerServiceRoleDefaultPolicy2308
      - HandshakeHandlerServiceRole2308
  APIGRouteHandshakeIntegrationPermission2308:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        Fn::GetAtt:
          - HandshakeHandler2308
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WRTCConnectionApiGateway2308
            - /*/handshake
  APIGRouteHandshakeIntegration2308:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WRTCConnectionApiGateway2308
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - HandshakeHandler2308
              - Arn
            - /invocations
  APIGHandshakeRoute2308:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WRTCConnectionApiGateway2308
      RouteKey: handshake
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: APIGRouteHandshakeIntegration2308
  APIGRouteConnectIntegrationPermission2308:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        Fn::GetAtt:
          - ConnectHandler2FFD52D8
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WRTCConnectionApiGateway2308
            - /*/$connect
  APIGRouteConnectIntegration2308:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WRTCConnectionApiGateway2308
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - ConnectHandler2FFD52D8
              - Arn
            - /invocations
  APIGConnectRoute2308:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WRTCConnectionApiGateway2308
      RouteKey: $connect
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: APIGRouteConnectIntegration2308
  APIGRouteDisconnectIntegrationPermission2308:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        Fn::GetAtt:
          - DisconnectHandlerCB7ED6F7
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WRTCConnectionApiGateway2308
            - /*/$disconnect
  APIGRouteDisconnectIntegration2308:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WRTCConnectionApiGateway2308
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - DisconnectHandlerCB7ED6F7
              - Arn
            - /invocations
  APIGDisconnectRoute2308:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WRTCConnectionApiGateway2308
      RouteKey: $disconnect
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: APIGRouteDisconnectIntegration2308
  APIGRouteIdentifyIntegrationPermission2308:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName:
        Fn::GetAtt:
          - ClientConnectHandler3Y2R1V9H
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn: 
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: WRTCConnectionApiGateway2308
            - /*/identify
  APIGRouteIdentifyIntegration2308:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId:
        Ref: WRTCConnectionApiGateway2308
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":apigateway:"
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - ClientConnectHandler3Y2R1V9H
              - Arn
            - /invocations
  APIGIdentifyRoute2308:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId:
        Ref: WRTCConnectionApiGateway2308
      RouteKey: identify
      Target:
        Fn::Join:
          - ""
          - - integrations/
            - Ref: APIGRouteIdentifyIntegration2308
  manageConnections7F91357B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:execute-api:'
                  - Ref: AWS::Region
                  - ':'
                  - Ref: AWS::AccountId
                  - ':'
                  - '*/*/POST/@connections/*'
        Version: '2012-10-17'
      PolicyName: manageConnections7F91357B
      Roles:
        - Ref: HandshakeHandlerServiceRole2308
        - Ref: ClientConnectHandlerServiceRole8G7E3F1A

Outputs:
  WebsocketURI:
    Description: "API Gateway websocket endpoint URL for Prod stage"
    Value:
      Fn::Join:
        - ""
        - - wss://
          - Ref: WRTCConnectionApiGateway2308
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /production
    Export:
      Name: WebsocketAPIURI
  DynamoDBTableArn:
    Value: !Ref ConnectionsTable8000B8A1
    Export:
      Name: ConnectionsTableName