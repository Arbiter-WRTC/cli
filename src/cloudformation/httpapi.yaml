Resources:
  ConnectionsTable8000B8A1:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  CreateRoomHandlerServiceRole2308:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  CreateRoomHandlerServiceRoleDefaultPolicy2308:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - ecs:RunTask
              - ecs:StartTask
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ec2:describeSubnets
              - ec2:describeSecurityGroups
            Effect: Allow
            Resource: "*"
          - Action:
              - iam:PassRole
            Effect: Allow
            Resource: "*"
            Condition:
              StringEquals:
                iam:PassedToService: "ecs-tasks.amazonaws.com"
      PolicyName: CreateRoomHandlerServiceRoleDefaultPolicy2308
      Roles:
        - Ref: CreateRoomHandlerServiceRole2308

  CreateRoomHandler2308:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');
          const ec2 = new AWS.EC2();
          const ecs = new AWS.ECS();

          exports.handler = async (event, context) => {
              const SFU_ID = AWS.util.uuid.v4()
              const subnetId = await findSubnetIdByName('SfuSubnet');
              const securityGroupId = await findSecurityGroupIdByTagName('SfuSecurityGroup')
              
              const params = {
                  cluster: 'Node-Sfu',
                  launchType: 'FARGATE',
                  taskDefinition: 'node-sfu',
                  count: 1,
                  networkConfiguration: { 
                  awsvpcConfiguration: { 
                  assignPublicIp: "ENABLED",
                  securityGroups: [ securityGroupId ],
                  subnets: [ subnetId ]
                  }
                },
                  overrides: {
                  containerOverrides: [
                    {
                      name: 'node-sfu',
                      environment: [
                        {
                          name: 'SIGNAL_SERVER_URL',
                          value: process.env.SIGNAL_SERVER_URL
                        },
                        {
                          name: 'RTC_CONFIG',
                          value: process.env.RTC_CONFIG
                        },
                        {
                          name: 'SFU_ID',
                          value: SFU_ID
                        },
                      ],
                    }
                  ],
                },
              };

              try {
                  const response = await ecs.runTask(params).promise();

                  // Handle the response as needed
                  if (response.tasks && response.tasks.length > 0) {
                      console.log("Task started:", response.tasks[0].taskArn);
                      return {
                          statusCode: 200,
                          body: 'Task started successfully!'
                      };
                  } else {
                      console.error("Failed to start task:", response);
                      return {
                          statusCode: 500,
                          body: 'Failed to start task.'
                      };
                  }
              } catch (error) {
                  console.error("Error:", error);
                  return {
                      statusCode: 500,
                      body: {error: error.message}
                  };
              }
          };

          async function findSecurityGroupIdByTagName(tagName) {
            const params = {
              Filters: [
                {
                  Name: 'tag:Name',
                  Values: [tagName]
                }
              ]
            };

            try {
              const response = await ec2.describeSecurityGroups(params).promise();
              if (response.SecurityGroups.length === 1) {
                return response.SecurityGroups[0].GroupId;
              } else if (response.SecurityGroups.length === 0) {
                throw new Error('No security group found with the specified tag name.');
              } else {
                throw new Error('Multiple security groups found with the specified tag name.');
              }
            } catch (error) {
              console.error('Error finding security group by tag name:', error);
              throw error;
            }
          }


          async function findSubnetIdByName(name) {
            const params = {
              Filters: [
                {
                  Name: "tag:Name",
                  Values: [name]
                }
              ]
            };

            try {
              const data = await ec2.describeSubnets(params).promise();
              const subnets = data.Subnets;
              
              if (subnets.length === 1) {
                return subnets[0].SubnetId;
              } else {
                throw new Error('Subnet name is not unique or does not exist.');
              }
            } catch (error) {
              console.error('Error finding subnet by name:', error);
              throw error;
            }
          }
      Role:
        Fn::GetAtt:
          - CreateRoomHandlerServiceRole2308
          - Arn
      Environment:
        Variables:
          table:
            Ref: ConnectionsTable8000B8A1
          RTC_CONFIG: '{"iceServers":[{"urls":"stun:anotherone-9ab8ceddb95235b7.elb.us-east-1.amazonaws.com:3478"},{"urls":"turn:anotherone-9ab8ceddb95235b7.elb.us-east-1.amazonaws.com:3478","username":"username1","credential":"password1"}]}'
          SIGNAL_SERVER_URL: https://signal.noop.live
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - CreateRoomHandlerServiceRoleDefaultPolicy2308
      - CreateRoomHandlerServiceRole2308
  GetRoomIDHandlerServiceRole2308:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  GetRoomIDHandlerServiceRoleDefaultPolicy2308:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ConnectionsTable8000B8A1
                  - Arn
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      PolicyName: GetRoomIDHandlerServiceRoleDefaultPolicy2308
      Roles:
        - Ref: GetRoomIDHandlerServiceRole2308
  GetRoomIDHandler2308:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');

          const ddb = new AWS.DynamoDB.DocumentClient();

          exports.handler = async function (event, context) {
            let requestedPath;
            try {
              requestedPath = JSON.parse(event.body).UrlPath;
            } catch(e) {
              return {
                statusCode: 400,
                body: JSON.stringify({ message: 'missing UrlPath' })
              };
            }

            const params = {
              TableName : process.env.table,
              FilterExpression : 'UrlPath = :UrlPath',
              ExpressionAttributeValues : {':UrlPath' : requestedPath}
            };
            
            try {
              const result = await ddb.scan(params).promise();
              console.log(result);
              if (result.Items && result.Items.length > 0) {
                const room = result.Items[0];
                return {
                  statusCode: 200,
                  body: JSON.stringify(room)
                };
              } else {
                return {
                  statusCode: 404,
                  body: JSON.stringify({ message: "Room not found" })
                }
              }
            } catch (e) {
              return {
                statusCode: 500,
                body: JSON.stringify({ message: e.message })
              };
            }
          };
      Role:
        Fn::GetAtt:
          - GetRoomIDHandlerServiceRole2308
          - Arn
      Environment:
        Variables:
          table:
            Ref: ConnectionsTable8000B8A1
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - GetRoomIDHandlerServiceRoleDefaultPolicy2308
      - GetRoomIDHandlerServiceRole2308
  ClaimRoomHandlerServiceRole2308:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Fn::Join:
            - ''
            - - 'arn:'
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  ClaimRoomHandlerServiceRoleDefaultPolicy2308:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:GetRecords
              - dynamodb:GetShardIterator
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:Scan
              - dynamodb:ConditionCheckItem
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:UpdateItem
              - dynamodb:DeleteItem
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - ConnectionsTable8000B8A1
                  - Arn
              - Ref: AWS::NoValue
        Version: '2012-10-17'
      PolicyName: ClaimRoomHandlerServiceRoleDefaultPolicy2308
      Roles:
        - Ref: ClaimRoomHandlerServiceRole2308
  ClaimRoomHandler2308:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          const AWS = require('aws-sdk');

          const ddb = new AWS.DynamoDB.DocumentClient();

          exports.handler = async function (event, context) {
            let requestedPath;
            try {
              requestedPath = JSON.parse(event.body).UrlPath;
            } catch(e) {
              return {
                statusCode: 400,
                body: JSON.stringify({ message: 'missing UrlPath' })
              };
            }

            const params = {
              TableName : process.env.table,
              FilterExpression : 'connectionStatus = :connectionStatus',
              ExpressionAttributeValues : {':connectionStatus' : 'UNCLAIMED'}
            };
            
            try {
              const result = await ddb.scan(params).promise();
              if (result.Items && result.Items.length > 0) {
                const room = result.Items[0];
                const updateParams = {
                  TableName: process.env.table,
                  Key: { connectionId: room.connectionId },
                  AttributeUpdates: {
                    'UrlPath': {
                      Action: 'PUT',
                      Value: requestedPath
                    },
                    'connectionStatus': {
                      Action: 'PUT',
                      Value: 'CLAIMED'
                    }
                  }
                }
              const updateResult = await ddb.update(updateParams).promise();
              return {
                statusCode: 200,
                body: JSON.stringify({'roomId': room.roomId})
              };
              
            } else {
                return {
                  statusCode: 404,
                  body: JSON.stringify({ message: "Room not found" })
                }
              }
            } catch (e) {
              return {
                statusCode: 500,
                body: JSON.stringify({ message: e.message })
              };
            }
          };
      Role:
        Fn::GetAtt:
          - ClaimRoomHandlerServiceRole2308
          - Arn
      Environment:
        Variables:
          table:
            Ref: ConnectionsTable8000B8A1
      Handler: index.handler
      Runtime: nodejs16.x
    DependsOn:
      - ClaimRoomHandlerServiceRoleDefaultPolicy2308
      - ClaimRoomHandlerServiceRole2308
  HTTPApiGateway2308:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: HTTPApiGateway2308
      ProtocolType: HTTP
      RouteSelectionExpression: ${request.method} ${request.path}
      CorsConfiguration:
        AllowOrigins:
          - "*"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - HEAD
          - OPTIONS
          - PATCH
        AllowHeaders:
          - "*"
        MaxAge: 86400
  HTTPApiGatewayProdStage2308:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId:
        Ref: HTTPApiGateway2308
      StageName: production
      AutoDeploy: true
  CreateRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HTTPApiGateway2308
      RouteKey: POST /createRoom
      Target: !Sub integrations/${CreateRoomIntegration}
  GetRoomIDRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HTTPApiGateway2308
      RouteKey: GET /getRoomId
      Target: !Sub integrations/${GetRoomIDIntegration}
  ClaimRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HTTPApiGateway2308
      RouteKey: PATCH /claimRoom
      Target: !Sub integrations/${ClaimRoomIntegration}
  CreateRoomIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HTTPApiGateway2308
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub >-
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateRoomHandler2308.Arn}/invocations
      PayloadFormatVersion: "2.0"
  GetRoomIDIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HTTPApiGateway2308
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub >-
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoomIDHandler2308.Arn}/invocations
      PayloadFormatVersion: "2.0"
  ClaimRoomIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HTTPApiGateway2308
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub >-
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ClaimRoomHandler2308.Arn}/invocations
      PayloadFormatVersion: "2.0"
  HTTPApiCreateRoomLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateRoomHandler2308.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref AWS::Partition
          - ":execute-api:"
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref HTTPApiGateway2308
          - /*/*
  HTTPApiGetRoomIDLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetRoomIDHandler2308.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref AWS::Partition
          - ":execute-api:"
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref HTTPApiGateway2308
          - /*/*
  HTTPApiClaimRoomLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ClaimRoomHandler2308.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ""
        - - "arn:"
          - !Ref AWS::Partition
          - ":execute-api:"
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref HTTPApiGateway2308
          - /*/*
  manageConnections7F91357B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:execute-api:'
                  - Ref: AWS::Region
                  - ':'
                  - Ref: AWS::AccountId
                  - ':'
                  - '*/*/POST/@connections/*'
        Version: '2012-10-17'
      PolicyName: manageConnections7F91357B
      Roles:
        - Ref: CreateRoomHandlerServiceRole2308
        - Ref: GetRoomIDHandlerServiceRole2308
        - Ref: ClaimRoomHandlerServiceRole2308
