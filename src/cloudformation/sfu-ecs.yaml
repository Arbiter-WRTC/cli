AWSTemplateFormatVersion: 2010-09-09
Resources:
  SfuDHCPOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: !Sub "${AWS::Region}.compute.internal"
      DomainNameServers:
        - AmazonProvidedDNS

  SfuVPCDHCPOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref SfuDHCPOptions
      VpcId: !Ref SfuVPC

  SfuNetworkACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref SfuVPC

  SfuNetworkACLInboundRuleAllTraffic:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      NetworkAclId: !Ref SfuNetworkACL
      Protocol: "-1" # Set to all traffic types
      RuleAction: allow
      RuleNumber: "105" # Change the rule number as needed

  SfuOutboundRule:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref SfuNetworkACL
      RuleNumber: 100
      Protocol: -1
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0

  SfuSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref SfuVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SfuSubnet

  SfuSubnetAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref SfuSubnet
      NetworkAclId: !Ref SfuNetworkACL

  SfuSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref SfuRouteTable
      SubnetId: !Ref SfuSubnet

  SfuVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: SfuVPC

  SfuInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: SfuInternetGateway

  SfuInternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref SfuVPC
      InternetGatewayId: !Ref SfuInternetGateway

  SfuRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref SfuVPC
      Tags:
        - Key: Name
          Value: SfuRouteTable

  SfuDefaultRoute:
    Type: "AWS::EC2::Route"
    DependsOn: SfuInternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SfuInternetGateway
      RouteTableId: !Ref SfuRouteTable

  SfuEcsTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
        Version: "2012-10-17"
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: CloudWatchLogsFullAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                  - "logs:GetLogEvents"
                  - "logs:FilterLogEvents"
                Resource: "*"
        - PolicyName: AdditionalPermissions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:DeleteScalingPolicy"
                  - "application-autoscaling:DeregisterScalableTarget"
                  - "application-autoscaling:DescribeScalableTargets"
                  - "application-autoscaling:DescribeScalingActivities"
                  - "application-autoscaling:DescribeScalingPolicies"
                  - "application-autoscaling:PutScalingPolicy"
                  - "application-autoscaling:RegisterScalableTarget"
                  - "appmesh:DescribeVirtualGateway"
                  - "appmesh:DescribeVirtualNode"
                  - "appmesh:ListMeshes"
                  - "appmesh:ListVirtualGateways"
                  - "appmesh:ListVirtualNodes"
                  - "autoscaling:CreateAutoScalingGroup"
                  - "autoscaling:CreateLaunchConfiguration"
                  - "autoscaling:DeleteAutoScalingGroup"
                  - "autoscaling:DeleteLaunchConfiguration"
                  - "autoscaling:Describe*"
                  - "autoscaling:UpdateAutoScalingGroup"
                  - "cloudformation:CreateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStack*"
                  - "cloudformation:UpdateStack"
                  - "cloudwatch:DeleteAlarms"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:PutMetricAlarm"
                  - "codedeploy:BatchGetApplicationRevisions"
                  - "codedeploy:BatchGetApplications"
                  - "codedeploy:BatchGetDeploymentGroups"
                  - "codedeploy:BatchGetDeployments"
                  - "codedeploy:ContinueDeployment"
                  - "codedeploy:CreateApplication"
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:CreateDeploymentGroup"
                  - "codedeploy:GetApplication"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:GetDeploymentGroup"
                  - "codedeploy:GetDeploymentTarget"
                  - "codedeploy:ListApplicationRevisions"
                  - "codedeploy:ListApplications"
                  - "codedeploy:ListDeploymentConfigs"
                  - "codedeploy:ListDeploymentGroups"
                  - "codedeploy:ListDeployments"
                  - "codedeploy:ListDeploymentTargets"
                  - "codedeploy:RegisterApplicationRevision"
                  - "codedeploy:StopDeployment"
                  - "ec2:AssociateRouteTable"
                  - "ec2:AttachInternetGateway"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:CancelSpotFleetRequests"
                  - "ec2:CreateInternetGateway"
                  - "ec2:CreateLaunchTemplate"
                  - "ec2:CreateRoute"
                  - "ec2:CreateRouteTable"
                  - "ec2:CreateSecurityGroup"
                  - "ec2:CreateSubnet"
                  - "ec2:CreateVpc"
                  - "ec2:DeleteLaunchTemplate"
                  - "ec2:DeleteSubnet"
                  - "ec2:DeleteVpc"
                  - "ec2:Describe*"
                  - "ec2:DetachInternetGateway"
                  - "ec2:DisassociateRouteTable"
                  - "ec2:ModifySubnetAttribute"
                  - "ec2:ModifyVpcAttribute"
                  - "ec2:RequestSpotFleet"
                  - "ec2:RunInstances"
                  - "ecs:*"
                  - "elasticfilesystem:DescribeAccessPoints"
                  - "elasticfilesystem:DescribeFileSystems"
                  - "elasticloadbalancing:CreateListener"
                  - "elasticloadbalancing:CreateLoadBalancer"
                  - "elasticloadbalancing:CreateRule"
                  - "elasticloadbalancing:CreateTargetGroup"
                  - "elasticloadbalancing:DeleteListener"
                  - "elasticloadbalancing:DeleteLoadBalancer"
                  - "elasticloadbalancing:DeleteRule"
                  - "elasticloadbalancing:DeleteTargetGroup"
                  - "elasticloadbalancing:DescribeListeners"
                  - "elasticloadbalancing:DescribeLoadBalancers"
                  - "elasticloadbalancing:DescribeRules"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "events:DeleteRule"
                  - "events:DescribeRule"
                  - "events:ListRuleNamesByTarget"
                  - "events:ListTargetsByRule"
                  - "events:PutRule"
                  - "events:PutTargets"
                  - "events:RemoveTargets"
                  - "fsx:DescribeFileSystems"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:ListInstanceProfiles"
                  - "iam:ListRoles"
                  - "lambda:ListFunctions"
                  - "logs:CreateLogGroup"
                  - "logs:DescribeLogGroups"
                  - "logs:FilterLogEvents"
                  - "route53:CreateHostedZone"
                  - "route53:DeleteHostedZone"
                  - "route53:GetHealthCheck"
                  - "route53:GetHostedZone"
                  - "route53:ListHostedZonesByName"
                  - "servicediscovery:CreatePrivateDnsNamespace"
                  - "servicediscovery:CreateService"
                  - "servicediscovery:DeleteService"
                  - "servicediscovery:GetNamespace"
                  - "servicediscovery:GetOperation"
                  - "servicediscovery:GetService"
                  - "servicediscovery:ListNamespaces"
                  - "servicediscovery:ListServices"
                  - "servicediscovery:UpdateService"
                  - "sns:ListTopics"
                Resource: "*"

  SfuSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "sfu-sg"
      VpcId: !Ref SfuVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: "SfuSecurityGroup"
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
    DependsOn: SfuVPC

  SfuECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: Node-Sfu
  SfuLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: /ecs/sfu-fargate-task-definition
      RetentionInDays: 7
  taskdefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Name: node-sfu
          Image: docker.io/ixisixi/arbiter-node-sfu
          Environment:
            - Name: "RTC_CONFIG"
              Value: >-
                {"iceServers":[{"urls":"stun:anotherone-9ab8ceddb95235b7.elb.us-east-1.amazonaws.com:3478"},{"urls":"turn:anotherone-9ab8ceddb95235b7.elb.us-east-1.amazonaws.com:3478","username":"username1","credential":"password1"}]}
            - Name: "SIGNAL_SERVER_URL"
              Value: "https://signal.noop.live"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: /ecs/node-sfu
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-stream-prefix: ecs
          PortMappings:
            - ContainerPort: 3001
              HostPort: 3001
              Protocol: tcp
              AppProtocol: http
      Cpu: "4096"
      Memory: "8192"
      ExecutionRoleArn: !Ref SfuEcsTaskExecutionRole
      Family: node-sfu
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX

  ECSService:
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: sfu-service
      Cluster: !Ref SfuECSCluster
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SfuSecurityGroup
          Subnets:
            - !Ref SfuSubnet
      TaskDefinition: !Ref taskdefinition